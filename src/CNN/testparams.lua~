-- 26-class problem
	noutputs = 26

-- input dimensions
	nfeats = 3
	width = 32
	height = 32
	ninputs = nfeats*width*height

-- number of hidden units (for MLP only):
	nhiddens = ninputs / 2

-- hidden units, filter sizes (for ConvNet only):
	nstates = {64,64,128}
	fanin = {1,4}
	filtsize = 5
	poolsize = 3
	stride = 2
	normkernel = image.gaussian1D(7)

model = nn.Sequential()
	        
-- stage 1 : filter bank -> squashing -> L2 pooling -> normalization
model:add(nn.SpatialConvolutionMM(nfeats, nstates[1], filtsize, filtsize))
--model:add(nn.Threshold(0,1e-6))
--model:add(nn.Tanh())
model:add(nn.ReLU())
model:add(nn.SpatialMaxPooling(poolsize, poolsize, stride, stride))
--model:add(nn.SpatialSubtractiveNormalization(16, normkernel))

-- stage 2 : filter bank -> squashing -> L2 pooling -> normalization
model:add(nn.SpatialConvolutionMM(nstates[1], nstates[2], filtsize, filtsize))
--model:add(nn.Threshold(0,1e-6))
--model:add(nn.Tanh())
model:add(nn.ReLU())
model:add(nn.SpatialMaxPooling(poolsize, poolsize, stride, stride))
-- model:add(nn.SpatialSubtractiveNormalization(nstates[2], normkernel))

-- stage 3 : filter bank -> squashing -> L2 pooling -> normalization

model:add(nn.SpatialConvolutionMM(nstates[1], nstates[3], 4, 4))
--model:add(nn.Threshold(0,1e-6))
--model:add(nn.Tanh())
model:add(nn.ReLU())   	  

-- stage 4 : standard 2-layer neural network
--model:add(nn.View(nstates[2]*5*5))
model:add(nn.View(128))
--model:add(nn.Dropout(0.5)) -- Adding dropout
--model:add(nn.Linear(nstates[2]*5*5, nstates[3]))
model:add(nn.Linear(128, 3072))
model:add(nn.ReLU())
model:add(nn.Linear(3072, 2048))
--model:add(nn.Threshold(0,1e-6))
--model:add(nn.Tanh())
model:add(nn.ReLU())   	        
model:add(nn.Linear(2048, noutputs))
